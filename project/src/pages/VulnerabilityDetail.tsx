import React from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { 
  ArrowLeft, Shield, Calendar, Server, User, Code, Link2, FileText, Tag,
  AlertTriangle, CheckCircle2, Clock, ChevronDown, MessageSquare
} from 'lucide-react';
import { mockVulnerabilities, mockAssets } from '../data/mockData';

const VulnerabilityDetail: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  
  const vulnerability = mockVulnerabilities.find(v => v.id === id);
  
  if (!vulnerability) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-xl font-medium text-white">Vulnerability not found</h2>
          <button
            className="mt-2 inline-flex items-center text-blue-500 hover:text-blue-400"
            onClick={() => navigate('/vulnerabilities')}
          >
            <ArrowLeft className="mr-2 h-4 w-4" />
            Return to vulnerabilities
          </button>
        </div>
      </div>
    );
  }

  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'critical':
        return 'bg-red-600';
      case 'high':
        return 'bg-orange-500';
      case 'medium':
        return 'bg-yellow-500';
      case 'low':
        return 'bg-blue-500';
      case 'info':
        return 'bg-gray-500';
      default:
        return 'bg-gray-500';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status.toLowerCase()) {
      case 'open':
        return <AlertTriangle className="h-5 w-5 text-red-500" />;
      case 'in progress':
        return <Clock className="h-5 w-5 text-yellow-500" />;
      case 'resolved':
        return <CheckCircle2 className="h-5 w-5 text-green-500" />;
      default:
        return <AlertTriangle className="h-5 w-5 text-gray-500" />;
    }
  };

  const handleStatusChange = (status: string) => {
    // In a real app, this would update the vulnerability status in the backend
    console.log(`Status changed to ${status} for vulnerability ${id}`);
  };

  const affectedAsset = mockAssets.find(a => a.id === vulnerability.assetId);

  const activityItems = [
    {
      user: 'John Smith',
      type: 'created',
      comment: 'Created this vulnerability after discovery during a penetration test.',
      date: '2 days ago'
    },
    {
      user: 'Alice Johnson',
      type: 'changed',
      comment: 'Changed severity from Medium to High based on impact assessment.',
      date: '1 day ago'
    },
    {
      user: 'Bob Wilson',
      type: 'commented',
      comment: 'I\'ve verified this vulnerability and started working on a fix.',
      date: '5 hours ago'
    }
  ];

  return (
    <div className="space-y-6">
      <div className="flex items-center space-x-4">
        <button
          className="p-2 rounded-full hover:bg-gray-700 transition-colors"
          onClick={() => navigate('/vulnerabilities')}
        >
          <ArrowLeft className="h-5 w-5 text-gray-400" />
        </button>
        <div>
          <h1 className="text-2xl font-semibold text-white">{vulnerability.title}</h1>
          <div className="flex items-center mt-1 space-x-3">
            <div className="flex items-center">
              <div className={`h-3 w-3 rounded-full ${getSeverityColor(vulnerability.severity)} mr-2`}></div>
              <span className="text-sm text-gray-400">{vulnerability.severity} Severity</span>
            </div>
            <span className="text-gray-600">â€¢</span>
            <div className="flex items-center">
              {getStatusIcon(vulnerability.status)}
              <span className="ml-2 text-sm text-gray-400">{vulnerability.status}</span>
            </div>
          </div>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Main details */}
        <div className="lg:col-span-2 space-y-6">
          <div className="bg-gray-800 rounded-lg shadow p-6">
            <h2 className="text-lg font-medium text-white mb-4">Description</h2>
            <p className="text-gray-300 whitespace-pre-line">{vulnerability.description}</p>
          </div>

          {vulnerability.steps && (
            <div className="bg-gray-800 rounded-lg shadow p-6">
              <h2 className="text-lg font-medium text-white mb-4">Steps to Reproduce</h2>
              <ol className="list-decimal text-gray-300 ml-6 space-y-2">
                {vulnerability.steps.map((step, index) => (
                  <li key={index}>{step}</li>
                ))}
              </ol>
            </div>
          )}

          {vulnerability.recommendation && (
            <div className="bg-gray-800 rounded-lg shadow p-6">
              <h2 className="text-lg font-medium text-white mb-4">Recommendation</h2>
              <p className="text-gray-300 whitespace-pre-line">{vulnerability.recommendation}</p>
            </div>
          )}

          {vulnerability.evidenceImage && (
            <div className="bg-gray-800 rounded-lg shadow p-6">
              <h2 className="text-lg font-medium text-white mb-4">Evidence</h2>
              <div className="mt-2 border border-gray-700 rounded-lg overflow-hidden">
                <img 
                  src={vulnerability.evidenceImage} 
                  alt="Vulnerability evidence"
                  className="w-full h-auto" 
                />
              </div>
            </div>
          )}

          {/* Activity feed */}
          <div className="bg-gray-800 rounded-lg shadow p-6">
            <h2 className="text-lg font-medium text-white mb-4">Activity</h2>
            <div className="space-y-4">
              {activityItems.map((item, index) => (
                <div key={index} className="flex space-x-3">
                  <div className="flex-shrink-0 w-8 h-8 rounded-full bg-blue-500 flex items-center justify-center">
                    <span className="text-white font-medium">
                      {item.user.charAt(0)}
                    </span>
                  </div>
                  <div className="flex-1 min-w-0">
                    <p className="text-sm text-white">
                      <span className="font-medium">{item.user}</span>
                      {' '}
                      <span className="text-gray-500">{item.type}</span>
                    </p>
                    <p className="text-sm text-gray-300">{item.comment}</p>
                    <p className="text-xs text-gray-500 mt-1">{item.date}</p>
                  </div>
                </div>
              ))}
            </div>

            {/* Add comment */}
            <div className="mt-6">
              <div className="relative">
                <textarea
                  rows={3}
                  className="block w-full rounded-md border-0 bg-gray-700 py-2 px-4 text-white placeholder:text-gray-400 focus:ring-2 focus:ring-blue-500 sm:text-sm"
                  placeholder="Add a comment..."
                />
                <div className="absolute right-2 bottom-2">
                  <button className="inline-flex items-center px-3 py-1.5 border border-transparent text-xs font-medium rounded shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-blue-500">
                    <MessageSquare className="h-4 w-4 mr-1" />
                    Comment
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Sidebar with metadata and actions */}
        <div className="space-y-6">
          {/* Actions */}
          <div className="bg-gray-800 rounded-lg shadow p-6">
            <h2 className="text-lg font-medium text-white mb-4">Actions</h2>
            <div className="space-y-3">
              <div className="dropdown relative">
                <button className="w-full flex items-center justify-between px-4 py-2 bg-gray-700 rounded-md text-white hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500">
                  <span className="flex items-center">
                    {getStatusIcon(vulnerability.status)}
                    <span className="ml-2">{vulnerability.status}</span>
                  </span>
                  <ChevronDown className="h-4 w-4" />
                </button>
                {/* Dropdown content would go here */}
              </div>
              <button className="w-full flex items-center justify-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                Generate Report
              </button>
              <button className="w-full flex items-center justify-center px-4 py-2 border border-gray-600 rounded-md shadow-sm text-sm font-medium text-white bg-transparent hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500">
                Assign Ticket
              </button>
            </div>
          </div>

          {/* Metadata */}
          <div className="bg-gray-800 rounded-lg shadow p-6">
            <h2 className="text-lg font-medium text-white mb-4">Details</h2>
            <div className="space-y-4">
              <div className="flex items-start">
                <div className="flex-shrink-0 mt-0.5">
                  <Shield className="h-5 w-5 text-gray-400" />
                </div>
                <div className="ml-3">
                  <h3 className="text-sm font-medium text-gray-300">CVSS Score</h3>
                  <p className="text-sm text-white">{vulnerability.cvssScore || 'N/A'}</p>
                </div>
              </div>
              <div className="flex items-start">
                <div className="flex-shrink-0 mt-0.5">
                  <Calendar className="h-5 w-5 text-gray-400" />
                </div>
                <div className="ml-3">
                  <h3 className="text-sm font-medium text-gray-300">Discovered</h3>
                  <p className="text-sm text-white">{vulnerability.discoveredAt || 'N/A'}</p>
                </div>
              </div>
              <div className="flex items-start">
                <div className="flex-shrink-0 mt-0.5">
                  <User className="h-5 w-5 text-gray-400" />
                </div>
                <div className="ml-3">
                  <h3 className="text-sm font-medium text-gray-300">Discovered By</h3>
                  <p className="text-sm text-white">{vulnerability.discoveredBy || 'N/A'}</p>
                </div>
              </div>
              <div className="flex items-start">
                <div className="flex-shrink-0 mt-0.5">
                  <Server className="h-5 w-5 text-gray-400" />
                </div>
                <div className="ml-3">
                  <h3 className="text-sm font-medium text-gray-300">Affected Asset</h3>
                  <p className="text-sm text-white">{affectedAsset?.name || 'N/A'}</p>
                </div>
              </div>
            </div>

            {/* Tags */}
            <div className="mt-6">
              <div className="flex items-center mb-2">
                <Tag className="h-5 w-5 text-gray-400 mr-2" />
                <h3 className="text-sm font-medium text-gray-300">Tags</h3>
              </div>
              <div className="flex flex-wrap gap-2">
                {vulnerability.tags.map((tag, index) => (
                  <span
                    key={index}
                    className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-700 text-gray-300"
                  >
                    {tag}
                  </span>
                ))}
              </div>
            </div>

            {/* References */}
            {vulnerability.references && vulnerability.references.length > 0 && (
              <div className="mt-6">
                <div className="flex items-center mb-2">
                  <Link2 className="h-5 w-5 text-gray-400 mr-2" />
                  <h3 className="text-sm font-medium text-gray-300">References</h3>
                </div>
                <div className="space-y-2">
                  {vulnerability.references.map((ref, index) => (
                    <a
                      key={index}
                      href={ref}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="block text-sm text-blue-500 hover:text-blue-400 truncate"
                    >
                      {ref}
                    </a>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default VulnerabilityDetail;